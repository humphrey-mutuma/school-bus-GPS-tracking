generator client {
  provider = "prisma-client-js"
  previewFeatures = ["fullTextSearchPostgres", "prismaSchemaFolder", "typedSql"]
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

model User {
  id         String   @id @default(cuid())
  email      String?   @unique @db.VarChar(255)
  password   String?   @db.VarChar(255) // // Nullable password
  name       String?  @db.VarChar(100) // Optional name, null for ADMIN if not needed
  phoneNumber    String?   @db.VarChar(20)
  role       Role
  createdAt  DateTime @default(now())
 
  // Relationships based on role
  parent     Parent?
  student    Student?
  driver     Driver?
  school     School?  @relation("SchoolAdmin") // One-to-one with School as Admin

}

model Parent {
  id        String   @id @default(cuid())
  userId    String   @unique // One-to-one with User
  user      User     @relation(fields: [userId], references: [id])
  student   Student? // 1:1 Relationship
}

model Student {
  id        String  @id @default(cuid())
  userId    String  @unique // One-to-one with User
  user      User    @relation(fields: [userId], references: [id])
  parentId  String? @unique // Enforcing 1:1 Relationship
  parent    Parent? @relation(fields: [parentId], references: [id])
  schoolId  String
  school    School  @relation(fields: [schoolId], references: [id])
}



model Driver {
  id             String   @id @default(cuid())
  userId         String   @unique // One-to-one with User
  user           User     @relation(fields: [userId], references: [id])
  carPlateNumber String   @unique @db.VarChar(20)
  schoolId         String    
  school           School     @relation(fields: [schoolId], references: [id])
}

model School {
  id       String    @id @default(cuid())
  name     String    @db.VarChar(100)
  address  String?    @db.Text
  students Student[] // A school has multiple students
  adminId  String?   @unique // One-to-one with User (Admin)
  admin    User?     @relation("SchoolAdmin", fields: [adminId], references: [id])
  drivers Driver[] // A school has multiple students

}

enum Role {
  ADMIN
  PARENT
  STUDENT
  DRIVER
}